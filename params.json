{"name":"Diceroller","tagline":"Little javascript library to help roll game players to make quick and easy web apps for roll various kind of dices","body":"DiceRoller\r\n==========\r\n\r\nLittle javascript library to help roll game players to make quick and easy web apps for roll various kind of dices\r\n\r\n##Specifications:\r\n- Single o multi dice rolls\r\n- Damage calculation\r\n\r\n##Getting Starterd\r\n\r\nDiceRoller is a light and simple **javascript** library made for help DM and players develop tools for make life easyer.\r\n\r\nMade in javascript, don´t need other libreries like **JQuery**.\r\n\r\nAt this time, i´m using **Bootstrap CSS** for easy styling, but is planned to develop a custom CSS.\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\">\r\n\t\t<title>DiceRoller</title>\r\n\t\t<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n\t\t<link rel=\"stylesheet\" href=\"css/roller.css\">\r\n\t\t<script src=\"js/diceroller.js\"></script>\r\n\t</head>\r\n\t<body>\r\n\t\t...content...\r\n\t</body>\r\n<html>\r\n```\r\n\r\n##Setting game system\r\nSet game rules is basic for the performance of DiceRoller\r\n\r\n```javascript\r\nvar GameSystem = {\r\n\r\n\t\tDiceSides: 100,\r\n\t\tPercentual: false,\r\n\t\tBaseSkill: 50,\r\n\t\tOpenRoll: true,\r\n\t\tBonusSkill: 0,\r\n\t\tHistoryBox: 'logbox',\r\n\r\n\t\tCriticalTreshold: 10,\r\n\t\tCriticalMultiplier: 2,\r\n\t\tCriticalPierceArmor: true,\r\n\r\n\t\tSpecialRoll: true,\r\n\t\tSpecialRollMultiplier: 1.5,\r\n\t\tSpecialRollTreshold: 20,\r\n\t\tSpecialRollPierceArmor: true,\r\n\r\n\t\tEpicFail: true,\r\n\t\tEpicFailTreshold: 10,\r\n\t\tEpicFailMaxTreshold: 96,\r\n\t\tEpicFailMinTreshold: 100\r\n\t\t\r\n};\r\n```\r\n\r\n`DiceSides`: Define how many sides uses the main dice. Games like MERP or BRP uses 1d100. \r\n\r\n`Percentual`: BRP games (like Rune Quest) uses a percentual system. Putting this option to false, automatically makes game system as a difficulty system (MERP or D&D game system).\r\n\r\n`BaseSkill`: A basic skill punctuation for roll on it.\r\n\r\n`OpenRoll`: MERP like system uses a \"open roll\" when the dice roll reaches certain puntuation\r\n\r\n`BonusSkill`: Add a puntuation modificator to the roll. Can be negative (a penalty to the roll).\r\n\r\n`HistoryBox`: ID of the div for the roll log.\r\n\r\n`CriticalTreshold`: Used as a percentage of the BaseSkill in BRP like system. A '10' means 10% of the BaseSkill.\r\n\r\n`CriticalMultiplier`: Critical hits multiplies damage? put your multiplier in this option.\r\n\r\n`CriticalPierceArmor`: Critical ignores armor protection? Set true here.\r\n\r\n`SpecialRoll`: **Percentile system.** Some game systems adds an extra success, better than a normal one, lesser than a critical. Set true if your game system use it.\r\n\r\n`SpecialRollMultiplier`: **Percentile system.** Set damage multiplier of the Special Roll.\r\n\r\n`SpecialRollTreshold`: **Percentile system.** Same as CriticalTreshold, but for Special roll. Pay attention, as the example from above with a BaseSkill: 50, crítical is set to 10% and Special to 20%. These mean, from 1% to 5% roll are crítical, and 6% to 10% are special rolls\r\n\r\n`SpecialRollPierceArmor`: Set to true if Special rolls ignores armor.\r\n\r\n`EpicFail`: EpicFail rolls needed? set to true.\r\n\r\n`EpicFailTreshold`: As Critical and Special roll, sets a percetage for Epic Fail rolls. In BRP like systems, usually is a range from 96 to 100% rolls.\r\n\r\n`EpicFailMaxTreshold`: Mínimal roll for a \"succes fail\". Example is set to 96, means a roll from 96 or more will be a EpicFail.\r\n\r\n`EpicFailMinTreshold`: independently, a máximun range can be setted.\r\n\r\n##Using DiceRoller\r\n\r\nDiceRoller uses \"D\" as a prefix for invoking it, like this\r\n\r\n`D(gamesystem).roll(3,6,0);`\r\n\r\nThe example from avobe is a very simple method, invoking a 3 rolls of 6 sides dice and a 0 modifier (a bonification to the roll or a penalty);\r\n\r\n`D(gamesystem).roll(2,6,6);`\r\n\r\nThese other example does a 2d6+6 roll.\r\n\r\n##### Catching D([GameSystem])\r\n\r\nMore comfortable form to use the same game system on every DiceRoller method is catching it like this:\r\n\r\n```javascript\r\nvar MySys = D(GameSystem);\r\n\r\nMySys.roll(2,6,6);\r\n\r\n```\r\n\r\n#### Skill method:\r\n\r\nMainly used for skill rolls, like combat skill, jump, craft, riding, etc. Accepts extra parameters like a modification to the roll, punctuation of the skill and difficulty to overcome.\r\n\r\n**skill(rolls, sides, mod, skill, difficulty):**\r\n\r\n```javascript\r\n//Makes 1d100 roll\r\nsystem.skill(1,100,0,false,false);\r\n```\r\n\r\n**Parameters**\r\n\r\n`rolls and sides`: How many rolls and how many sides have our dice.\r\n\r\n`mod`: A bonification or a penaltiy for this roll. This mod is applied first at skill, not at the end of the roll.\r\n\r\n`skill`: Base puntuation of the rolled skill. If is not defined, by default uses BaseSkill. Set to 0 is possible if a skill does not required.\r\n\r\n`difficulty`: Set a difficulty to overcome in non percentual game system.\r\n\r\n**Skill() Return object:**\r\n\r\nSkill returns an object like the sequent example:\r\n\r\n```javascript\r\nRollsObj = {\r\n\tRoll : RollResult,\r\n\tCritical : true,\r\n\tSpecial: false,\r\n\tEpicFail: false,\r\n\tFail: false\r\n};\r\n```\r\n**Parameters returned:**\r\n\r\n`Roll`: Returns the final result of the skill roll.\r\n\r\n`Critical`: true for a critical roll.\r\n\r\n`Special`: true for a special roll.\r\n\r\n`EpicFail`: true if the roll result is a Epic Fail.\r\n\r\n`Fail`: false for a succes, true for a fail.\r\n\r\n#### Damage method:\r\n\r\nMethod used for calculate and show damage.\r\n\r\n**damage(params, ParamsSkill, showlog):**\r\n\r\n```javascript\r\nsystem.damage({\r\n\t\t// this example is for a (2d6+2) + 1d4-3\r\n\t\tSides : [ 6, 4 ],\r\n\t\tModDamage: [ 2, -3 ],\r\n\t\tRolls: [ 2,  1 ]\r\n\t},\r\n\tsystem.skill(1,100,0,false,false), \r\n\ttrue\r\n);\r\n\r\n```\r\n\r\n**Parameters**\r\n\r\n`params`: Basic parameters. Multiple dices, mods an rolls can be defined\r\n- `Sides`: Define dices sides.\r\n- `ModDamage`: Set a bonification or a penalty to the result. Is applied at the end of the roll.\r\n- `ParamSkill`: Method Skill() can be passed, passing an object with the roll result (see skill method and the object returned).\r\n- `showlog`: shows the rolls and the result on a div as a log. Div ID setted on `system.Historybox`\r\n\r\n#### Armor method ~ WIP\r\n\r\nUsed to calculate armor protection (damage absorption). In actual version of DiceRoller, damage is calculate as a \"generic\" damage, doesn´t differ from magic or elemental damage.\r\n\r\n######Armor settings:\r\n\r\n\r\n```javascript\r\nvar armor = {\r\n\tphysic : [ { Name: 'Physic', Sides : 6, Fixed : 1, Rolls : 1 } ],\r\n\tDamageReduction : [ { Name: 'Damage Reduction', Sides : 0, Fixed : 1, Rolls : 1 } ],\r\n\tarcane : [ { Name: 'Arcane', Sides : 6, Fixed : 1, Rolls : 1 } ],\r\n\tfire : [ { Name: 'Fire', Sides : 10, Fixed : 0, Rolls : 1 } ],\r\n\tfrost : [ { Name: 'Frost', Sides : 6, Fixed : 0, Rolls : 2 } ],\r\n\telectric : [ { Name: 'Electric', Sides : 0, Fixed : 4, Rolls : 1 } ],\r\n\tpoison : [ { Name: 'Poison', Sides : 0, Fixed : 1, Rolls : 3 } ]\r\n};\r\n\r\n```\r\n\r\nThe code from above prepares a object with an array of data, putting generic types of damage in almost all rolgames.\r\n\r\n##### Parameters of armor object:\r\n- `Name`: Name showed on the log.\r\n- `Sides`: Sides of the Dice Armor.\r\n- `Fixed`: Bonificator or penalty for the dice result.\r\n- `Rolls`: How many rolls per dice.\r\n\r\nSetting Sides at 0 doesn´t skip armor calculation, cause the game system maybe uses fixed values of damage reduction.\r\n\r\n\r\n**Armor(ArmorParams, FullDamage, Showlog);**\r\n\r\n```javascript\r\n\r\n//combined skill() result with damage() and armor()\r\n\r\nvar DmgResult = system.damage({\r\n\t\t// this example is for a (2d6+2) + 1d4-3\r\n\t\tSides : [ 6, 4 ],\r\n\t\tModDamage: [ 20, -3 ],\r\n\t\tRolls: [ 2,  1 ]\r\n\t},\r\n\tsystem.skill(1,100,0,false,false), \r\n\ttrue\r\n);\r\n\r\nsystem.armor(armor, DmgResult, true);\r\n\r\n```\r\n**Parameters**\r\n\r\n- `armor`: Described above in \"Armor Settings\".\r\n- `DmgResult`: Damage calculated from damage()\r\n- `showlog`: shows the rolls and the result on a div as a log. Div ID setted on `system.Historybox`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}